<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>joshforb.es</title>
    <link>https://joshforb.es/</link>
    <description>Recent content on joshforb.es</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Jul 2017 21:43:12 -0400</lastBuildDate>
    
	<atom:link href="https://joshforb.es/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Model Factory States To Create Related Models</title>
      <link>https://joshforb.es/post/model-factory-states/</link>
      <pubDate>Fri, 14 Jul 2017 21:43:12 -0400</pubDate>
      
      <guid>https://joshforb.es/post/model-factory-states/</guid>
      <description>Laravelâ€™s model factories can be used to automatically create related models when the factory is called. This is a great way to DRY up the arrange portion of your tests. Consider the following factory definition:
$factory-&amp;gt;define(Comment::class, function ($faker) { return [ &#39;post_id&#39; =&amp;gt; factory(Post::class)-&amp;gt;lazy(), &#39;content&#39; =&amp;gt; $faker-&amp;gt;sentence() ]; });  This factory will create a Comment along with a Post whenever it is called unless the Post is explicitly provided.</description>
    </item>
    
    <item>
      <title>Persisting Polymorphism</title>
      <link>https://joshforb.es/post/persisting-polymorphism/</link>
      <pubDate>Mon, 01 May 2017 21:43:12 -0400</pubDate>
      
      <guid>https://joshforb.es/post/persisting-polymorphism/</guid>
      <description>Recently I worked on a project where a user&amp;rsquo;s choice needed to permanently modify the behavior of an object. The gist of the project is that a user is creating a job posting and at some point they will choose how they wish to publish the job: using a job credit, as a daily rate, on a recruiting plan, etc. The choice of publishable type alters the behavior of the job every time the user decides to change its status (from draft to open, draft to scheduled, open to closed).</description>
    </item>
    
  </channel>
</rss>